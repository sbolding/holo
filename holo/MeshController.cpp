//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : MeshController.cpp
//  @ Date : 2/23/2014
//  @ Author : SRB
//
//


#include "MeshController.h"

bool compare_pairs_seconds(const std::pair<int, double> & left, const std::pair<int, double> & right)
{
	return (left.second < right.second);
}

MeshController::MeshController(HoMesh* mesh, double exp_conv_constant, int n_batches_to_check):
	_required_conv_rate(exp_conv_constant),
	_mesh(mesh), 
	_n_batches_to_check(n_batches_to_check),
	_batch_residual_norms()
{
	createConnectivityArray();
}

double MeshController::computeElementJumpError(int element_id)
{
	

	return 9000;
}

void MeshController::createConnectivityArray()
{
	//loop parameters
	std::vector<ECMCElement1D*>* elements = _mesh->getElements();
	std::vector<ECMCElement1D*>::iterator it_el;

	for (it_el = elements->begin(); it_el != elements->end(); it_el++)
	{
		if ((*it_el)->hasChildren())
		{
			continue;
		}	
		_connectivity_array[(*it_el)->getID()] = findNeighbors((*it_el)->getID());
	}
}

void MeshController::storeResidualNorm(double residual_norm)
{
	if (_batch_residual_norms.size() == (_n_batches_to_check+1)) //one extra since you need ratios to check refinement
	{
		_batch_residual_norms.erase(_batch_residual_norms.begin()); //remove the oldest element
	}
	_batch_residual_norms.push_back(residual_norm);
}

void MeshController::refineMesh()
{
	//compute the jump error for each active element
	std::vector<std::pair<int,double>> jump_errors; //a list of the jump errors, indexed by map above

	
	//loop over the element pointers
	//if they are not active, fucked up somewhere
	//



	//update the boundary cells if needed
	_mesh->findUpwindBoundaryCells();

	//update the connectivity array for all the new elements and their neighbors
	for (int el_id = 0; el_id < _newly_refined_elements.size(); el_id++)
	{
		updateConnectivityArray(_newly_refined_elements[el_id]);
	}
	_newly_refined_elements.clear(); //no need to keep this
	
	std::cout << "temporary for debugging meshcontroller\n";
	_batch_residual_norms.push_back(0);

	//reset convergence rate criteria
	_batch_residual_norms.erase(_batch_residual_norms.begin(), _batch_residual_norms.end() - 1); //clear all but the last one

}

bool MeshController::meshNeedsRefinement()
{
	if (_batch_residual_norms.size() != (_n_batches_to_check + 1))
	{
		return false; //not enough batches to check convergence, because of noise
	}
	else
	{
		double alpha_avg = 0.0;
		for (int i = 0; i < _n_batches_to_check; ++i) //loop over batches
		{
			alpha_avg += std::log(_batch_residual_norms[i] / _batch_residual_norms[i+1]);
		}
		alpha_avg /= (float)_n_batches_to_check;

		//check convergence
		if (alpha_avg < _required_conv_rate) //if error increases, alpha will be negative and go back up
		{
			return true;
		}
		else
		{
			return false;
		}
	}
}

void MeshController::refineElement(int element_id)
{
	//add refined elements to the array
	_newly_refined_elements.push_back(element_id);

	//probably better to have this function return the new elements made
	ECMCElement1D* unrefined_element = _mesh->_elements[element_id];
	std::vector<ECMCElement1D*> new_elements;
	_mesh->getElement(element_id)->refine(_mesh->_n_elems - 1); //pass the id of last element made

	//add the new elements to the list and update number of elements
	new_elements = _mesh->getElement(element_id)->getChildren();
	_mesh->_elements.insert(_mesh->_elements.end(), new_elements.begin(), new_elements.end());
	_mesh->_n_elems += new_elements.size();

	//determine if the refined cell was on a boundary
	std::vector<int>::iterator it_bound;
	it_bound = std::find(_mesh->_boundary_cells.begin(), _mesh->_boundary_cells.end(), element_id);
	if (it_bound != _mesh->_boundary_cells.end()) 
	{
		_mesh->_boundary_cells_need_update = true; //created cell was on a boundary, update boundary cells
		return; //no upwind boundary poitners to update
	}
	
	//Update downstream element pointers to the refined elements if necessary
	ECMCElement1D* upstream_el = _mesh->findJustUpwindElement(element_id);
	if (upstream_el->getRefinementLevel() == new_elements[0]->getRefinementLevel()) 
	{
		//the upstraem element is of same refinement, need to set the other daughter too
		if (upstream_el->getAngularCoordinate() < unrefined_element->getAngularCoordinate()) //found bottom (minus mu) refined cell
		{
			upstream_el->setDownStreamElement(new_elements[1]);
			upstream_el = _mesh->findJustUpwindElement(new_elements[3]->getID()); //get the top cell
			upstream_el->setDownStreamElement(new_elements[3]); //set the top cells ds element
		}
		else //you found the top (plus mu) refined cell
		{
			//This case is not normally called, but it works and may happen in the event of round off
			upstream_el->setDownStreamElement(new_elements[3]);
			upstream_el = _mesh->findJustUpwindElement(new_elements[1]->getID());
			upstream_el->setDownStreamElement(new_elements[1]);
		}
	}
	else if (upstream_el->getRefinementLevel() == unrefined_element->getRefinementLevel()) 
	{
		if (upstream_el->hasChildren())
		{
			//This is called because the boundary cells are only being updated once per total refinement,
			//but it is not a problem.  The findJustUpwind function works in this case, it just returns
			//the parent element rather than the children because children are not listed as boundary cell yet
			upstream_el->getChild(0)->setDownStreamElement(new_elements[1]);
			upstream_el->getChild(2)->setDownStreamElement(new_elements[3]);
		}
		else
		{
			//no ds elem pnters to update
		}
	}
}

ElementNeighbors MeshController::findNeighbors(int element_id)
{
	ElementNeighbors neighbors;

	//loop parameters
	std::vector<ECMCElement1D*>* elements = _mesh->getElements();
	std::vector<ECMCElement1D*>::iterator it_el;
	
	//reference element parameters
	ECMCElement1D* element = _mesh->getElement(element_id);
	int el_refinement = (int)element->getRefinementLevel();
	double el_mu_coor = element->getAngularCoordinate();
	double el_mu_minus = el_mu_coor - 0.5*element->getAngularWidth();
	double el_mu_plus = el_mu_coor + 0.5*element->getAngularWidth();
	double el_x_coor = element->getSpatialCoordinate();
	double el_x_left = el_x_coor - 0.5*element->getSpatialWidth();
	double el_x_right = el_x_coor + 0.5*element->getSpatialWidth();

	//Set the downstream and upstream element values, based on flow direction
	_mesh->findUpwindBoundaryCells(); //must have boundary cells for this function to work
	ECMCElement1D* up_str_element = _mesh->findJustUpwindElement(element_id);
	ECMCElement1D*  ds_element = element->getDownStreamElement();
	if (el_mu_coor > 0)
	{
		neighbors._right = ds_element;
		neighbors._left = up_str_element;
	}
	else
	{
		neighbors._right = up_str_element;
		neighbors._left = ds_element;
	}

	//find the top (plus mu) and bottom (minus mu) elements
	bool top_found = false;
	bool bottom_found = false;
	for (it_el = elements->begin(); it_el != elements->end(); it_el++)
	{
		//check that still have elements to find
		if (bottom_found) 
		{
			if (top_found)
			{
				break;
			}
		}

		//don't compare to itself
		if (*it_el == element) continue;

		//make sure element is a possible match, based on refinement
		int it_refinement_level = (int)(*it_el)->getRefinementLevel();
		if (std::abs(it_refinement_level - el_refinement) > 1)
		{
			continue;
		}

		double it_x_coor = (*it_el)->getSpatialCoordinate();
		double it_h_x = (*it_el)->getSpatialWidth();

		if (std::abs(el_x_coor - it_x_coor) < it_h_x) //element matches vertically
		{
			double it_mu_coor = (*it_el)->getAngularCoordinate();
			double it_h_mu = (*it_el)->getAngularWidth();
			double it_mu_minus = it_mu_coor - 0.5*it_h_mu;
			double it_mu_plus = it_mu_coor + 0.5*it_h_mu;

			if (std::abs(el_mu_plus - it_mu_minus) < GlobalConstants::RELATIVE_TOLERANCE)
			{
				//check that refinement level isnt greater, if that is the case then the parent cell is top cell and will be found elsewhere
				if (it_refinement_level > el_refinement)
				{
					continue;
				}
				else //found top cell
				{
					neighbors._plus = (*it_el);
					top_found = true;
				}
			}
			else if (std::abs(el_mu_minus - it_mu_plus) < GlobalConstants::RELATIVE_TOLERANCE)
			{
				//check that refinement level isnt greater, if that is the case then the parent cell of it_el is bot cell and will be found elsewhere in loop
				if (it_refinement_level > el_refinement)
				{
					continue;
				}
				else //found top cell
				{
					neighbors._minus = (*it_el);
					bottom_found = true;
				}
			}
			else
			{
				continue;
			}
		}
	}

	if (! HoController::REFINE_ACROSS_MU_ZERO)
	{
		//check that element does not have a mu edge on zero
		if (std::abs(el_mu_minus) < GlobalConstants::RELATIVE_TOLERANCE)
		{
			neighbors._minus = NULL;
		}
		else if (std::abs(el_mu_plus) < GlobalConstants::RELATIVE_TOLERANCE)
		{
			neighbors._plus = NULL;
		}
	}
	
	return neighbors;
}

void MeshController::updateConnectivityArray(int refined_element_id)
{
	//Check all neighbors to see if they need updating before you update the actual elements
	ElementNeighbors neighbors = _connectivity_array[refined_element_id];
	for (int i = 0; i<neighbors._element_pntrs.size(); ++i)
	{
		ECMCElement1D* neighbor = neighbors._element_pntrs[i];
		if (neighbor != NULL)
		{
			if (neighbor->hasChildren()) //need to update pntrs for its children, else pointers still point to the parent of refined_element_id, so ok
			{
				std::vector<ECMCElement1D*> children(neighbor->getChildren());
				std::vector<ECMCElement1D*>::iterator it_child;
				for (it_child = children.begin(); it_child != children.end(); it_child++)
				{
					int child_id = (*it_child)->getID();
					_connectivity_array[child_id] = findNeighbors(child_id);
				}
			}
		}
	}

	//Now update the connectivity array for the children of this element
	std::vector<ECMCElement1D*> children = _mesh->_elements[refined_element_id]->getChildren();
	std::vector<ECMCElement1D*>::iterator it_child;
	for (it_child = children.begin(); it_child != children.end(); it_child++)
	{
		int child_id = (*it_child)->getID();
		_connectivity_array[child_id] = findNeighbors(child_id);
	}

	//Delete the parent cells member in map
	_connectivity_array.erase(refined_element_id);
}
//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  High Order Solver
//  @ File Name : HoSolver.h
//  @ Date : 1/27/2014
//  @ Author : Simon R Bolding
//
//


#if !defined(_HOSOLVER_H)
#define _HOSOLVER_H

#include "Mesh.h"
#include <vector>
#include <iostream>
#include "FaceTally.h"
#include "CurrentElementTally.h"
#include "CurrentFaceTally.h"
#include "FluxElementTally.h"
#include "FluxFaceTally.h"
#include "ElementTally.h"
#include "Particle1D.h"
#include "Source.h"
#include "SourceConstant.h"
#include "RNG.h"
#include "Controller.h"
#include "AverageCosineData.h"
#include "MeshController.h"

class HoSolver
{
protected:

	Mesh* _lo_mesh;	//pointer to the mesh to be used
	HoMesh* _ho_mesh; //pointer to the ho mesh to be created;
	MeshController* _mesh_controller; //For adapting the high order mesh, dynamic because it is based on ho_mesh object

	//Tallies
	std::vector<CurrentFaceTally*> _current_face_tallies;  //vector of all the face current tallies, indexed using connectivity array
	std::vector<CurrentElementTally*> _current_element_tallies; //vector of element current tallies 
	std::vector<FluxElementTally*> _flux_element_tallies; //vector of all the flux volume tallies, indexed using connectivity array
	std::vector<FluxFaceTally*> _flux_face_tallies; //vector of all the flux face tallies

	//other problem parameters
	int _n_histories;	//number of histories
	int _n_batches; //number of batches for ECMC simulations
	std::string _solver_mode_str;  ////either "holo-ecmc", 'holo-standard-mc', or 'standard-mc'
	int _solver_mode_int; //integer solver mode, use HoSolver map from GlobalConstant.h to map the string to int
	Particle1D* _particle;	//One particle that has all the methods to stream, cross interfaces, etc.
	RNG _rng; //random number generator
	
public:

	HoSolver(); //Default constructor, should probably never be called
	HoSolver(Mesh* _mesh, int n_histories, int n_bins_half_range, string solver_mode, double required_exp_convg_constant, 
		int n_batches = 1, int n_batches_to_avg = 3); //How many angular cells to split each spatial mesh cell into initially, n_batches_to_keep is for convergence check
	void solveSystem(std::ostream & out = std::cout); //run the high order problem, default output to screen
	void updateSystem(); //compute the angular fluxes and compute new residual source

	//reader, printer, and interface functions
	virtual LoData1D getLoData(int element_id);		//calculate the LoData parameters based on tallies;
	void printFaceTally(int face_id, std::ostream &out) const;
	void printElementTally(int element_id, std::ostream &out) const;
	void printAllTallies(std::ostream &out) const;
	//methods for data transfer
	//double getFaceTally(int element_id, int rel_face_id, int angular_bin, int spatial_moment);

};

#endif  //_HOSOLVER_H

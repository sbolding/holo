// This code currently uses a full matrix and direct inversion to solve the low order
// System.  
// TODO  Need to update this to use a banded matrix and better solver 
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LoSolver.h
//  @ Date : 11/1/2013
//  @ Author : SRB
//
//


#if !defined(_LOSOLVER_H)
#define _LOSOLVER_H

#include "numMatrixFull.h"
#include "Mesh.h"
#include "LoData1D.h"
#include <ostream>
#include "Controller.h"

class LoSolver
{
protected:

	//Variables
    numMatrix* _system_matrix;			//banded system matrix typically
    int _n_dof = 0;						//Degrees of Freedom of the entire system
    numVector* _system_vec;				//The load vector on the right hand side
    numVector* _sol_vec;					//Solution vector, probably not necessary to have full vector
    int _dim = 0;					    //Problem dimension
	Mesh* _mesh;

	//Functions
    virtual void assembleSystem() = 0;  //Builds system
    void solveLinearSystem();			//Solves a Linear sytem of _system_matrix*_sol_vec = _system_vec
	virtual void setNumDof() = 0;			//For when the mesh has changed
	void deleteMatrixVector();			//For cleaning up memory

	
public:
    LoSolver(int dim, Mesh* mesh); 
	LoSolver();
    virtual void printSolution(std::ostream& out) = 0;
    virtual void solveSystem() = 0;			//Pure virtual to acess sub classes, assembles matrix and solves system
	void printSystem(std::ostream& out);
	void updateSystem() const;  //Take the low order solution vec DOF and map to element values

};

#endif  //_LOSOLVER_H

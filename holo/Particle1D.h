//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  High Order Solver
//  @ File Name : Particle1D.h
//  @ Date : 1/27/2014
//  @ Author : Simon R Bolding
//
//


#if !defined(_PARTICLE1D_H)
#define _PARTICLE1D_H

#include <string>
#include "Mesh.h"
#include "RNG.h"
#include "GlobalConstants.h"

class Particle1D
{
protected:

	Mesh* _mesh;
	
	//Tally stuff
	std::vector<FaceTally>* _face_tallies;  //vector of all the face tallies, indexed using connectivity array
	std::vector<ElementTally>* _element_tallies; //vector of all the volume tallies, indexed using connectivity array

	double _position;
	double _mu;
	double _weight;
	double _sigma_tot;
	double _mfp_tot;
	double _scat_ratio;
	double _sigma_abs;
	double _sigma_scat;
	unsigned int _method;
	int _current_element;
	RNG* _rng;

	//protected methods
	double samplePathLength();
	double samplePathLengthMFP();
	void sampleCollision();
	void updatePosition(double path_length);
	void scoreTallies();

public:

	//constructors
	Particle1D(Mesh* mesh, RNG* rng); //Standard constructor, pass a pointer for rng to make sure you dont resample random numbers

	//public functions
	void streamThroughCell();
	double getRandNum() const;
	void setPosition(double new_position); //For source sampling, force where particle is within a cell
	void setWeight(double weight);  //Basically just for initializing the source
	void 


};

#endif  //_PARTICLE1D_H
